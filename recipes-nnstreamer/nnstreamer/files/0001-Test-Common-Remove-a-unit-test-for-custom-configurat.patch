From ee2dc1fb4952597faa2b7a8eabf6dc3b5ccd96e0 Mon Sep 17 00:00:00 2001
From: Wook Song <wook16.song@samsung.com>
Date: Mon, 15 Jun 2020 12:59:22 +0900
Subject: [PATCH 1/1] [Test/Common] Remove a unit test for custom configuration

Since there is no way to override the location of the configuration file
after it is installed, such types of test cases should be skipped when
the test cases are required to be run after installation. For this reason,
this patch removes unit test cases for the configuration file provided by
the environment variable.

Signed-off-by: Wook Song <wook16.song@samsung.com>
---
 tests/common/unittest_common.cc | 149 --------------------------------
 1 file changed, 149 deletions(-)

diff --git a/tests/common/unittest_common.cc b/tests/common/unittest_common.cc
index 20814c7b..00326f88 100644
--- a/tests/common/unittest_common.cc
+++ b/tests/common/unittest_common.cc
@@ -800,155 +800,6 @@ static gchar *create_null_file (const gchar *dir, const gchar *file)
   return fullpath;
 }
 
-/**
- * @brief Check string custom conf
- */
-static gboolean check_custom_conf (const gchar *group, const gchar *key, const gchar *expected)
-{
-  gchar *str = nnsconf_get_custom_value_string (group, key);
-  gboolean ret = (0 == g_strcmp0 (str, expected));
-
-  g_free (str);
-  return ret;
-}
-
-/**
- * @brief Test custom configurations
- */
-TEST (conf_custom, env_str_01)
-{
-  gchar *fullpath = g_build_path ("/", g_get_tmp_dir(), "nns-tizen-XXXXXX", NULL);
-  gchar *dir = g_mkdtemp (fullpath);
-  gchar *filename = g_build_path ("/", dir, "nnstreamer.ini", NULL);
-  gchar *dirf = g_build_path ("/", dir, "filters", NULL);
-  gchar *dircf = g_build_path ("/", dir, "custom", NULL);
-  gchar *dird = g_build_path ("/", dir, "decoders", NULL);
-
-  EXPECT_EQ (g_mkdir (dirf, 0755), 0);
-  EXPECT_EQ (g_mkdir (dircf, 0755), 0);
-  EXPECT_EQ (g_mkdir (dird, 0755), 0);
-
-  FILE *fp = g_fopen (filename, "w");
-  const gchar *fn;
-  const gchar *base_confenv;
-  gchar *confenv;
-
-  ASSERT_TRUE (fp != NULL);
-
-  base_confenv = g_getenv ("NNSTREAMER_CONF");
-  confenv = (base_confenv != NULL) ? g_strdup (base_confenv) : NULL;
-
-  g_fprintf (fp, "[common]\n");
-  g_fprintf (fp, "enable_envvar=True\n");
-  g_fprintf (fp, "[filter]\n");
-  g_fprintf (fp, "filters=%s\n", dirf);
-  g_fprintf (fp, "customfilters=%s\n", dircf);
-  g_fprintf (fp, "[decoder]\n");
-  g_fprintf (fp, "decoders=%s\n", dird);
-  g_fprintf (fp, "[customX]\n");
-  g_fprintf (fp, "abc=OFF\n");
-  g_fprintf (fp, "def=on\n");
-  g_fprintf (fp, "ghi=TRUE\n");
-  g_fprintf (fp, "n01=fAlSe\n");
-  g_fprintf (fp, "n02=yeah\n");
-  g_fprintf (fp, "n03=NAH\n");
-  g_fprintf (fp, "n04=1\n");
-  g_fprintf (fp, "n05=0\n");
-  g_fprintf (fp, "mzx=whatsoever\n");
-  g_fprintf (fp, "[customY]\n");
-  g_fprintf (fp, "mzx=dunno\n");
-  g_fprintf (fp, "[customZ]\n");
-  g_fprintf (fp, "mzx=wth\n");
-  g_fprintf (fp, "n05=1\n");
-
-  fclose (fp);
-
-  gchar *f1 = create_null_file (dirf, "libnnstreamer_filter_fantastic"
-      NNSTREAMER_SO_FILE_EXTENSION);
-  gchar *f2 = create_null_file (dirf, "libnnstreamer_filter_neuralnetwork"
-      NNSTREAMER_SO_FILE_EXTENSION);
-  gchar *f3 = create_null_file (dird, "libnnstreamer_decoder_omg"
-      NNSTREAMER_SO_FILE_EXTENSION);
-  gchar *f4 = create_null_file (dird, "libnnstreamer_decoder_wthisgoingon"
-      NNSTREAMER_SO_FILE_EXTENSION);
-  gchar *f5 = create_null_file (dircf, "custom_mechanism"
-      NNSTREAMER_SO_FILE_EXTENSION);
-  gchar *f6 = create_null_file (dircf, "fastfaster"
-      NNSTREAMER_SO_FILE_EXTENSION);
-
-  EXPECT_TRUE (FALSE != g_setenv ("NNSTREAMER_CONF", filename, TRUE));
-  EXPECT_TRUE (nnsconf_loadconf (TRUE) == TRUE);
-
-  fn = nnsconf_get_fullpath ("fantastic", NNSCONF_PATH_FILTERS);
-  EXPECT_STREQ (fn, f1);
-  fn = nnsconf_get_fullpath ("neuralnetwork", NNSCONF_PATH_FILTERS);
-  EXPECT_STREQ (fn, f2);
-  fn = nnsconf_get_fullpath ("notfound", NNSCONF_PATH_FILTERS);
-  EXPECT_STREQ (fn, NULL);
-  fn = nnsconf_get_fullpath ("omg", NNSCONF_PATH_DECODERS);
-  EXPECT_STREQ (fn, f3);
-  fn = nnsconf_get_fullpath ("wthisgoingon", NNSCONF_PATH_DECODERS);
-  EXPECT_STREQ (fn, f4);
-  fn = nnsconf_get_fullpath ("notfound", NNSCONF_PATH_DECODERS);
-  EXPECT_STREQ (fn, NULL);
-  fn = nnsconf_get_fullpath ("custom_mechanism", NNSCONF_PATH_CUSTOM_FILTERS);
-  EXPECT_STREQ (fn, f5);
-  fn = nnsconf_get_fullpath ("fastfaster", NNSCONF_PATH_CUSTOM_FILTERS);
-  EXPECT_STREQ (fn, f6);
-  fn = nnsconf_get_fullpath ("notfound", NNSCONF_PATH_CUSTOM_FILTERS);
-  EXPECT_STREQ (fn, NULL);
-
-  EXPECT_TRUE (check_custom_conf ("customX", "abc", "OFF"));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "abc", TRUE));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "abc", FALSE));
-  EXPECT_TRUE (check_custom_conf ("customX", "def", "on"));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "def", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "def", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customX", "ghi", "TRUE"));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "ghi", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "ghi", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customX", "n02", "yeah"));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "n02", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "n02", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customX", "n03", "NAH"));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "n03", FALSE));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "n03", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customX", "n04", "1"));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "n04", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "n04", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customX", "n05", "0"));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "n05", FALSE));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "n05", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customX", "mzx", "whatsoever"));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customX", "mzx", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customX", "mzx", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customY", "mzx", "dunno"));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customY", "mzx", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customY", "mzx", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customZ", "mzx", "wth"));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customZ", "mzx", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customZ", "mzx", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customZ", "n05", "1"));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customZ", "n05", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customZ", "n05", TRUE));
-  EXPECT_TRUE (check_custom_conf ("customW", "n05", NULL));
-  EXPECT_FALSE (nnsconf_get_custom_value_bool ("customW", "n05", FALSE));
-  EXPECT_TRUE (nnsconf_get_custom_value_bool ("customW", "n05", TRUE));
-
-  if (confenv) {
-    g_setenv ("NNSTREAMER_CONF", confenv, TRUE);
-    g_free (confenv);
-  } else {
-    g_unsetenv ("NNSTREAMER_CONF");
-  }
-  g_free (f1);
-  g_free (f2);
-  g_free (f3);
-  g_free (f4);
-  g_free (f5);
-  g_free (f6);
-}
-
 /**
  * @brief Main function for unit test.
  */
-- 
2.17.1

